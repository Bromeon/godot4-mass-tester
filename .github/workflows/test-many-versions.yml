# Compile Godot 4
# See also: https://docs.godotengine.org/en/latest/development/compiling/compiling_for_linuxbsd.html




name: Godot build pipeline

# !!!! MUST run with true first, then with false. A bit annoying, but somehow artifacts aren't found otherwise, then the run fails,
# and then they're not even published; so all Godot build time goes to waste.
env:
  COMPILE_GODOT: false


on:
  workflow_dispatch: # manual trigger
  push:

defaults:
  run:
    shell: bash

# If a new commit is pushed before the old one's CI has completed (on the same branch), abort previous run
#concurrency:
#  group: ${{ github.head_ref }}
#  cancel-in-progress: true

jobs:
  compile-godot:
    # For runners, see https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
    runs-on: ubuntu-20.04
    name: linux-${{ matrix.ord }}-${{ matrix.sha }}

    # Some scons flags, from detect.py
    #  * EnumVariable("linker", "Linker program", "default", ("default", "bfd", "gold", "lld", "mold")),
    #  * BoolVariable("use_llvm", "Use the LLVM compiler", False),
    #  * BoolVariable("use_ubsan", "Use LLVM/GCC compiler undefined behavior sanitizer (UBSAN)", False),
    #  * BoolVariable("use_asan", "Use LLVM/GCC compiler address sanitizer (ASAN)", False),
    #  * BoolVariable("use_lsan", "Use LLVM/GCC compiler leak sanitizer (LSAN)", False),
    #  * BoolVariable("use_tsan", "Use LLVM/GCC compiler thread sanitizer (TSAN)", False),
    #  * BoolVariable("use_msan", "Use LLVM compiler memory sanitizer (MSAN)", False),
    #
    # Some sanitizers are incompatible: msan/asan, lsan/tsan, asan/tsan
    strategy:
      fail-fast: false
      matrix:
        include:
          - { ord: 0, sha: '6916349697a4339216469e9bf5899b983d78db07' }
          - { ord: 1, sha: '62ca46cea480f30b16d271252ceb4ee846996017' }
          - { ord: 2, sha: 'a6a2d0d1599835364cdf5f912f98d87c5317dd05' }
          - { ord: 3, sha: '49e2bd9d5bcfe8d81a368ec80f802f90e883bec2' }
          - { ord: 4, sha: '7b999ee07448501f8e234cde16f603ce6f9f3062' }
          - { ord: 5, sha: '2f919f0fd0c7cf758dff90f99fbd3ca5b9612ac0' }
          - { ord: 6, sha: '4a7d49a89a381f78f19d0b989c5cb5b500f098c9' }
          - { ord: 7, sha: '1fee40a1897aaff77be3df8ec13d97981e8d8ba8' }
          - { ord: 8, sha: 'a6de7a8a3f127dcfb4c603adb6cade149c370791' }
          - { ord: 9, sha: '3006394a69af7ffdf8770cb28b65a690ebfdae00' }
          - { ord: 10, sha: 'fba341ce44427d9515a581c19a8c98b522cef02b' }
          - { ord: 11, sha: '249e724835be7852297a7d59b6ab739064460e41' }
          - { ord: 12, sha: 'c05f521e16eabb4dc5809d7f41f01af833a32be8' }
          - { ord: 13, sha: '670de082f9c33b1c3dce0579cd35518717a68ef2' }
          - { ord: 14, sha: '3075e4ef1d279876e71c8bfdc89ebfeb962d8cb5' }
          - { ord: 15, sha: '7f8c3124a84504490dd20e5cf766b60837ae8430' }
          - { ord: 16, sha: '373c4b22d3f2ea1f08ec36ca95a5115e9d967cfb' }
          - { ord: 17, sha: 'db6a8956b2bcb69398908b587be57f59c2a2fd43' }
          - { ord: 18, sha: 'd46c962f1850ee8aca933d147a1997156c69069d' }
          - { ord: 19, sha: 'af1d81d95a9bced2e4c05488d8117963d1620863' }
          - { ord: 20, sha: '9e455f424a635549b295272d82757c7ff99f33d7' }
          - { ord: 21, sha: '04846c1d6db029bacb388438307669438e1504af' }
          - { ord: 22, sha: 'f2ba8ec6ca2e4ff493cba11f95621d10ab8bb363' }

    steps:
      - name: "Clone Godot ${{ matrix.sha }} "
        if: env.COMPILE_GODOT == 'true'
        # Note: GODOT_BIN file does not yet exist, but the path can already be stored
        # Cloning doesn't work, need init + fetch
        env:
          SHA: ${{ matrix.sha }}
        run: |
          git init
          #git remote add origin https://github.com/godotengine/godot.git
          git remote add origin https://github.com/dsnopek/godot.git
          git fetch --depth 1 origin $SHA
          git reset --hard FETCH_HEAD

          echo "SHA=`git rev-parse HEAD`" >> $GITHUB_ENV
          echo "SHORT_SHA=`git rev-parse --short HEAD`" >> $GITHUB_ENV
          echo "GODOT_BIN=bin/godot.linuxbsd.editor.dev.x86_64" >> $GITHUB_ENV
#
#      - name: "Check cache for Godot version ${{ env.SHORT_SHA }}"
#        id: cache-godot
#        uses: actions/cache@v3
#        with:
#          path: bin #${{ runner.temp }}/godot_bin
##          key: godot-${{ matrix.id }}-${{ env.SHA }}
#          key: godot-linux-${{ env.SHA }}

      - name: "Checkout this repo"
        if: env.COMPILE_GODOT == 'true'
        uses: actions/checkout@v3
        with:
          path: 'repo'
          clean: 'false'

      - name: "Install scons"
        if: env.COMPILE_GODOT == 'true'
#        if: steps.cache-godot.outputs.cache-hit != 'true'
        run: |
          pip install scons==3.1.2
          scons --version

      - name: "[Linux] C dependencies"
        if: env.COMPILE_GODOT == 'true'
#        if: steps.cache-godot.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          # The actual dependencies
          sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev \
              libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev \
              libdbus-1-dev libudev-dev libxi-dev libxrandr-dev yasm xvfb wget unzip \
              llvm libspeechd-dev speech-dispatcher fontconfig libfontconfig-dev

      - name: "[Linux|macOS] Compile Godot..."
        if: env.COMPILE_GODOT == 'true'
#        if: steps.cache-godot.outputs.cache-hit != 'true'
        run: |
          scons platform=linuxbsd target=editor dev_build=yes

#      - name: "[Linux|macOS] Make executable"
##        if: steps.cache-godot.outputs.cache-hit != 'true'
#        run: |
#          ls -la bin
#          chmod +x $GODOT_BIN

      # Upload artifact also when cached (so last successful workflow always has artifact)
      - name: "Upload artifact"
        if: env.COMPILE_GODOT == 'true' && always()
        uses: actions/upload-artifact@v3
        with:
          name: godot-linux-${{ matrix.sha }}
          path: bin

      - name: "Summary"
        if: env.COMPILE_GODOT == 'true'
        # xargs has the nice side effect of trimming leading/trailing whitespace, see https://stackoverflow.com/a/12973694
        # The other answers, while more "idiomatic" (if that can even be said for something like bash), are not properly handling newlines
        run: |
          ls -la bin
          godotVer=$($GODOT_BIN --version | xargs)
          echo "## Godot version: \`$godotVer\`" >> $GITHUB_STEP_SUMMARY
          echo "Built for **${{ matrix.id }}** from commit [\`$SHA\`](https://github.com/godotengine/godot/commit/$SHA)." >> $GITHUB_STEP_SUMMARY

      - name: "Move bin/* to main directory, if itest is continued"
        if: env.COMPILE_GODOT == 'true'
        run: mv bin/* .

      # ----------------------------------------------------------------------------------------------------------------------------------------------
      # gdext

      # Not a mistake: this clones self, below clones gdext
      - uses: actions/checkout@v3
        if: env.COMPILE_GODOT != 'true' # apparently needed, otherwise artifacts are not published

      - uses: actions/checkout@v3
        if: env.COMPILE_GODOT != 'true'
        with:
          repository: godot-rust/gdext
          clean: false
          path: gdext

      - name: "List directory"
        if: env.COMPILE_GODOT != 'true'
        run: |
          tree -L 2

      - name: "Run Godot integration test"
        if: env.COMPILE_GODOT != 'true'
        uses: ./.github/composite/godot-itest
        with:
          artifact-name: godot-linux-${{ matrix.sha }}
          godot-binary: godot.linuxbsd.editor.dev.x86_64