# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

name: godot
description: "Run Godot integration tests"

inputs:
  artifact-name:
    required: true
    description: "Name of the compiled Godot artifact to download"

  godot-binary:
    required: true
    description: "Filename of the Godot executable"


runs:
  using: "composite"
  steps:
    # Replaces also backspaces on Windows, since they cause problems in Bash
    - name: "Store variable to Godot binary"
      run: |
        runnerDir=$(echo "${{ runner.temp }}" | sed "s!\\\\!/!")
        echo "RUNNER_DIR=$runnerDir" >> $GITHUB_ENV
        echo "GODOT4_BIN=$runnerDir/godot_bin/${{ inputs.godot-binary }}" >> $GITHUB_ENV
      shell: bash

#    - name: "Check cache for installed Godot version"
#      id: "cache-godot"
#      uses: actions/cache@v3
#      with:
#        path: ${{ runner.temp }}/godot_bin
#        key: ${{ inputs.artifact-name }}-v${{ inputs.godot-ver }}
#      shell: bash

#    - name: "Download Godot artifact"
##      if: steps.cache-godot.outputs.cache-hit != 'true'
#      run: |
#        curl https://nightly.link/Bromeon/godot4-mass-tester/workflows/compile-godot/master/${{ inputs.artifact-name }}.zip \
#          -Lo artifact.zip \
#          --retry 3
#        unzip artifact.zip -d $RUNNER_DIR/godot_bin
#      shell: bash

    # JavaScript, see https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#using-data-from-the-triggering-workflow
    - name: "Download Godot artifacts"
      uses: actions/github-script@v6
      with:
        script: |
          let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
             owner: context.repo.owner,
             repo: context.repo.repo,
             //run_id: context.payload.workflow_run.id,
             run_id: 4939838607,
          });
          let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
            return artifact.name == "${{ inputs.artifact-name }}"
          })[0];
          let download = await github.rest.actions.downloadArtifact({
             owner: context.repo.owner,
             repo: context.repo.repo,
             artifact_id: matchArtifact.id,
             archive_format: 'zip',
          });
          let fs = require('fs');
          fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/artifact.zip`, Buffer.from(download.data));

    - name: 'Unzip artifact'
      run: unzip -d ${{ env.RUNNER_DIR }}/godot_bin/ artifact.zip
      shell: bash

#    - name: "Download artifact ${{ inputs.artifact-name }}"
#      uses: actions/download-artifact@v3
#      with:
#        name: "${{ inputs.artifact-name }}"
#        path: ${{ env.RUNNER_DIR }}/godot_bin

    - name: "Debug current"
      run: |
        ls -la
      shell: bash

    - name: "Debug godot_bin"
      run: |
        ls -la ${{ env.RUNNER_DIR }}/godot_bin
      shell: bash

    - name: "Prepare Godot executable"
      run: |
        chmod +x $GODOT4_BIN
      shell: bash
